Q:
Lecture 15 Arrays and Pointers

_______________________
Arrays
A:

Q:
How do you make a one dimensional array?

A:

--> declare it with a size
int Array[10];
char name[30];

Q:
Print the last value of the Array from above.

A:

--> printf("%d", Array[9]);


Q:
How do you init a array with a list of values?

A:

--> int a[5] = {1,2,3,4,5};

Q:
How do you print the above elements in array a?

A:

for (int i = 0; i<5; i++){
        prtinf("%d", a[i]);
}


Q:
Search through an array for the number 3 and print the index if it exists. Assume the array has only integers.

A:

int a[5] = {1,4,3,2,5};
int search = 3;
int index = -1;

for (int i = 0; i<5; i++){
        if (a[i] == search) {
                index = i;
        }
}
if (index != -1) {
        printf("The index of %d is %d\n", search, index);
} else {
        printf("%d is not present in the array\n", search);
}

Q:
What does this do:

int a[5];
prtinf("%d", a[0]);

A:

--> undefined behaviour it may print some number but it is a garbage value since it hasn't been assinged

Q:
What is a segmentation fault error?

A:

--> error when you access a memory location you do not have permission for.


Q:
What is the format specifier for size_t or an unsigned integer?

A:

--> %zu


Q:
How do you get then print the size of: int i;

A:

size_t size = sizeof(i);
prtinf("Size of i is: %zu bytes\n", size);

Q:
What is generally the size of an array?

A:

--> The size of the base type x the length


Q:
How do you get the length of an array?

A:

--> since size = base type x length
--> length = size / base type = sizeof(array) / sizeof(array[0])



Q:
How to initialize a multidimensional array?

A:

int a[3][5] =  {{5, 4, 3, 1, 3}, {5, 2, 5, 6, 4}, {7, 4, 6, 4, 2}};


Q:
How to access element at row 3, last column?

A:

--> a[2][4]

Q:
Is memory divided into bits or bytes?

A:

--> bytes which are made up of 8 bits


Q:
Draw/outline how a 4 byte integer i would occupy memory address 200.

A:

Address Contents
200     i
201     i
202     i
203     i
â€¦


Q:
Pointers have addresses, True/False

A:
--> True

Q:
Are these statments different? int* p; int *p;

A:

--> No, C doesn't care about whitespace


Q:
How do you get the address of int i and assing it to pointer p?;

A:

int i;
int *p:
p = &i;
// or directly use int *p = &i;


Q:
What does this do?

A:

int i;
int *p;
p = &i;
i = 5;
printf("%d", i);
printf("%d", i);


--> prints 5
--> prints 5

Q:
What does this do?

A:

int i;
int *p;
p = &i;
*p = 2;
printf("%d", i);
printf("%d", i);


--> prints 2
--> prints 2

Q:
How would you create a point that points to an int?

A:

--> int *p;



Q:
What does this mean? int* p;

A:

--> the type of p is a pointer to int


Q:
What is the type of q? int* p, q;

A:

--> p is a pointer, but q is a int


Q:
How do you typecast in C?

A:

int i;
float f;
i = (int) f;


Q:
How do you print the address of a pointer?

A:

--> Assing the pointer to a variable and use the %p format specifier and type cast (void *)

int i;
int *q = &i;
printf("%p", (void*) q);


Q:
if variable p points to a integers address what would happen if you do this: printf("%d", p);

A:

--> Since the address is a large number it will likely typecast the actual address to a decimal representation of it. Meaning it will only print the last couple of bytes of info about the address.



Q:
End of Lec 3
A:
bye!