Q:
Intro to C: Compilation
A:

Q:
Describe what a Systems programing language does
A:
--> machine level concepts
--> Opertaions are close to computer instructions
--> Easier to write than assembly but without giving up too much power, more error prone


Q:
Give examples of some of the things made with C

A:
--> Operating systems
--> database engines
--> game engines
--> embedded systems
--> interpreters

Q:
What advatages does C have?

A:
--> highly portable
--> very fast due to value based reference
--> Some higher level basic types are simplified

Q:
What disadvatages does C have?

A:
--> No OOP
--> No concepts of namespace
--> No simple data wrapping or binding
--> Some higher level basic types have to be handeled differently

Q:
How is C run?

A:
1. Source code is written and ran through a compilier, we use gcc.
2. the compilier checks for errors and creates a executable file.
--> this ex file contains binary (machine code) that is understood by the CPU

Q:
What is the recommended layout of a C program?

A:
Libraries/Directives
Functions
Main


Q:
Write a program that takes a number from a user and calculates the factorial of that number.

A:

Q:
How would you compile a c program called helloworld? How about with warnings, and errors? What if the program takes the sin value of a number?

A:
--> gcc -o hello helloworld.c
--> gcc -Wall -Werror -o hello helloworld.c
--> gcc -Wall -Werror -o hello helloworld.c -lm



Q:
How do you print to standard out with a new line in C, what does this function throw if no error is present?

A:

#inclde <stdlib.h>
puts("Hello\n");
--> it throws a 0 since the signature is: int puts(char const *string);

Q:
What are the 5 escape characters?

A:

\n : New line
\r : carriage return
\t : tab
\\ : backslash
\b : backspace (non-destructive)

Q:
How would you read a single number or letter from stdin?

A:

#include <stdio.h>

int ch;
ch = getc(stdin);


Q:
How do compilier errors work? What happens after the compilier finds a error?

A:

-When it finds an error it marks it as an error
-then makes an assumption and continues compiling in order to
 find more errors.


Q:
Which file does the compilier directly compile from source code?

A:
--> the i file

Q:
Draw the C compilation process:

A:
prog.c -> preprocessor -> i file -> Compilier (compile + assembly) -> Object file -> Linker + library files -> executable file (prog)


Q:
How to process command line arguments in a c program?

A:

int main(int argc, char *argv[])
{
        // argv[0] : first arg
        // argv[1] : second arg

        if (argc < 1) {
                puts("error needs at least 1 arg");
                printf("error needs at least 1 arg %s\n", argv[0])
        }

        for (int i=0; i<argc; i++) {
                printf("%s\n", argv[i]);
        }
}


Q:
Using a build script, redirect stdout to a output file

A:

#!/bin/bash

gcc -Wall -Werror helloworld.c 2>fileoutput.txt

if [ $? -eq 0 ]; then
        cat ./fileoutput.txt
fi


Q:
Would this loop work to print out command line args in a main function? Assume at least 1 argument is passed.

A:

for (int i=0; argv[i] != NULL; i++) {
        printf("%s\n", argv[i]);
}

Q:
How do you signal that a program has successfully ran?

A:
--> in main return 0;
--> return 1; // indicates a error




Q:
End of Lec 1
A:
bye!