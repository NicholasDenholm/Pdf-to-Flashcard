Q:
Lesson 12: Dynamic Memory

A:

Q:
Where do local variables live?
A:
--> On the call stack


Q:
Do addresses have different sizes True/False
A:
--> False


Q:
Do all pointers have the same size?
A:
--> Yes

Q:
Which function would you use to read from stdin?
A:
--> scanf


Q:
How would you access a number that indicated the number command line arguments?
A:
--> use int argc;


Q:
List what each step does. Are there any errors?

int * read_numbers (int *n)
{
        printf("How many numbers ? ");
        scanf("%d", n);
        int nums [*n];
        for (int i = 0; i < *n; i++) {
                scanf("%d", &nums[i]);
        }
        return nums;
}

A:
--> prints the str to stdout
--> gets user input from stdin and assings it to the pointer n
--> creates a array of size : pointer to n (returns the address of n). Should read int nums[n];
--> Loop that terminates when the i reaches the int stored at n
--> gets user input from stdin for each number at i index in the array
--> returns the array, but since the function holds nums on the stack when it returns this array the memory address will no longer be valid. it should read: return *nums

Q:
Can you return pointers to global variables?
A:
--> yes


Q:
Can you return pointers to local variables?
A:
--> No, eventually garbage values will be returned


Q:
How would you fix this code using dynamic memory?

int * read_numbers (int *n)
{
        printf("How many numbers ? ");
        scanf("%d", n);
        int nums[n];
        for (int i = 0; i < *n; i++) {
                scanf("%d", &nums[i]);
        }
        return nums;
}

A:
int *read_numbers(int *n) {
    printf("How many numbers ? ");
    scanf("%d", n);
    int *nums = malloc(*n * sizeof(int)); // Dynamically allocate memory
    if (nums == NULL) {
        // Handle memory allocation failure
        return NULL;
    }
    for (int i = 0; i < *n; i++) {
        scanf("%d", &nums[i]);
    }
    return nums; // Return the pointer to dynamically allocated memory
}


Q:
What is the lifetime of a local variable?
A:
--> the time in which the program is in the function where it is initialized


Q:
What is the lifetime of a global variable?
A:
--> the entire time the program is running


Q:
Where do malloc blocks live?
A:
--> on the heap

Q:
What is returned when we do this: p = malloc(N); return p;
A:
--> a pointer to that block of N bytes in size


Q:
How do you release a block of memory?
A:
--> use free()


Q:
Do you need to free other variables associated with a malloc'ed array?
A:
--> No you only need to free the pointers that come from malloc. Things like len and size or other defined variables can be set to 0 or null when required.




Q:
End of Lec 4
A:
bye!